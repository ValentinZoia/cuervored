
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  log             = ["query"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



enum UserRole {
  ADMIN
  USER
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String? @unique
  fullName      String? 
  bio           String?
  email         String @unique
  emailVerified DateTime?
  password      String? 
  role          UserRole @default(USER)
  image         String? 
  provider      String?
  accounts      Account[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  post          Post[]
  following     Follow[]       @relation("Following")
  followers     Follow[]       @relation("Followers")
  comments      Comment[]
  likes         Like[]


  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Follow {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String
  follower    User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}






model Post {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  image     String?
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())
  likes     Like[]
  comments  Comment[]

  //Relación Inversa con los comentarios
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  postId    String  @db.ObjectId
  userId    String  @db.ObjectId
  content  String
  createdAt DateTime  @default(now())

  //Relación inversa con el modelo Post
  post      Post  @relation(fields: [postId], references: [id], onDelete:Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post  @relation(fields: [postId], references: [id], onDelete:Cascade)

  @@unique([userId, postId])
  
}

